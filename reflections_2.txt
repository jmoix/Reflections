What happens when you initialize a repository? Why do you need to do it?
the .git file is created. With this file you can configure your git settings and what to save from this project.
How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area holds a reference to what is to be committed. Without it you would just have to commit the entire directory.
How can you use the staging area to make sure you have one commit per logical change?
You can use git diff --stage to check you changes against the last commit. If the commit is too big, you can remove target files for the commit.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you are trying something experimental while maintaining a current working version of your code on another branch.
How do the diagrams help you visualize the branch structure?
By labelling the commits with references to their parents, you can then see what commits can be accessed by what branches.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result is a new branch containing all of the commits of the two branches. The diagram allows us to see what commits were contained in each branch and the result of merging them.
What are the pros and cons of Git's automatic merging vs. always doing merges manually?
The pros are that you save a lot of time, however you still need to be available to manually resolve conflicts so that bugs aren't introduced into your code.
